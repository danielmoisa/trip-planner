// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTripPayload post trip payload
//
// swagger:model postTripPayload
type PostTripPayload struct {

	// End date of the trip
	// Example: correct horse battery staple
	// Required: true
	// Max Length: 255
	// Min Length: 1
	EndDate *string `json:"endDate"`

	// Name of the trip
	// Example: My trip
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// Start date of the trip
	// Example: correct horse battery staple
	// Required: true
	// Max Length: 255
	// Min Length: 1
	StartDate *string `json:"startDate"`
}

// Validate validates this post trip payload
func (m *PostTripPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostTripPayload) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.MinLength("endDate", "body", *m.EndDate, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("endDate", "body", *m.EndDate, 255); err != nil {
		return err
	}

	return nil
}

func (m *PostTripPayload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *PostTripPayload) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.MinLength("startDate", "body", *m.StartDate, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("startDate", "body", *m.StartDate, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post trip payload based on context it is used
func (m *PostTripPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostTripPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostTripPayload) UnmarshalBinary(b []byte) error {
	var res PostTripPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
